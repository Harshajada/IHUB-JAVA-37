GIT/GITHUB
==========

Q) What is the difference between GIT and GITHUB ?

GIT						GITHUB
--------					--------
It is a distributed version control system 	It is a hosting server for GIT.
which is used to track the changes in each 
file of a project.

It is a software.				It is a service.

It is installed locally on a system.		It is hosted on web.

It is command line.				It is a Grahical User Interface.	

It contains local repository.			It contains remote repository.	



GIT Stages
===========
GIT contains three stages.

1) Working Directory 

2) Staging Area

3) Repository 

Diagram: jsp7.1


How to push the code to GITHUB
==============================
step1:
-----
	Create a account in GITHUB.
	ex:
		www.github.com 

step2:
-----
	Login to GITHUB account.
	ex:
		username or email 	:  NiyazulHasan
		password		:  *******
			

step3:
-----
	Create a remote repository.
	ex:
		https://github.com/NiyazulHasan/IH-JAVA-038


step4:
-----
	Download and Install GIT.
	ex:
		https://git-scm.com/downloads

step5:
-----
	Create a "myFolder" on Desktop.

step6:
-----
	Copy and paste the files inside "myFolder".

step7:
-----
	Open the git bash from "myFolder" location.

step8:
------
	Initialize the git empty repository.
	ex:
		git init 

step9:
------
	Check the status.
	ex:
		git status 	

step10:
------
	Move from master branch to main branch.
	ex:
		git branch --move master main 

step11:
------
	Add the files to staging area.
	ex:
		git add . 

step12:
------
	commit the changes.
	ex:
		git commit -m "my first file"

	Note:
		Please tell me who you are

		git config --global user.email ulhasan7867@gmail.com


step13:
-------
	Add the remote origin to main.
	ex:
		git remote add origin  https://github.com/NiyazulHasan/IH-JAVA-038

step14:
------
	Push the code.
	ex:
		git push -f origin main 


step15:
------
	Refresh the remote repository.
	ex:
		https://github.com/NiyazulHasan/IH-JAVA-038



How to pull the code from github
==================================
step1:
-----
	Create a "NewFolder" folder on desktop.

step2:
-----
	Open the git bash.

step3:
------
	Initialized git empty repository.
	ex:
		git init
step4:
-----
	Make a pull request.  
	ex:
		git pull https://github.com/NiyazulHasan/IH-JAVA-038



JUnit
======
JUnit is a unit testing framework.

Unit testing means small unit of a code working as per requirement or not.

The latest version is JUnit 5.

To perform unit testing we need to create test cases and test suit.

Unit testing is important for TDD (Test Driven Development).

Advantages of Junit
---------------------
1) find the bugs early.

2) Easy to fix the bugs

3) Reduce the cost and time.


ex:
----

Simple Maven Archetype project structure
-------------------------------------
DemoProject
|
|----src/main/java
	|
	|---com.ihub.www
		|
		|---App.java
|
|----src/main/resources
|
|----src/test/java
	|
	|---com.ihub.www
		|
		|---AppTest.java
|
|----src/test/resources



Steps to perform unit testing
=============================
step1:
------
	Create a simple maven archetype project.

step2:
-------
	create a com.ihub.www package inside "src/main/java".

step3:
------
	Create a App.java file inside "com.ihub.www" package.

App.java
---------
package com.ihub.www;

public class App 
{
	public int sum(int a,int b)
	{
		return a+b;
	}
}


step4:
-----
	Create a Test file i.e AppTest.java.
	ex:
		right click to App.java file --> new --> others -->
		Junit --> test case --> Next --> select the methods for 
		test cases --> finish.


step5:
-----
	Add unit testing logic inside AppTest.java file.

AppTest.java
------------
package com.ihub.www;

import static org.junit.Assert.*;

import org.junit.Test;

public class AppTest {

	@Test
	public void testSum() {
		App app=new App();
		int result=app.sum(10,20);
		assertEquals(30, result);
	}

}

step6:
-----
	Run the junit test cases.
	ex:
		Right click to AppTest.java file --> run as --> Junit test case.

Note:
-----
	Green color indicates unit test case is passed.
	Brown color indicates unit test case is failed.
































