Deployment Directory structure
-------------------------------
DBApp
|
|----Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---DBSrv.java
|----WebContent
	|
	|---form.html
	|
	|---WEB-INF
		|
		|-----web.xml
		|
		|-------lib
			|
			|---ojdbc14.jar

Note:
-----
In above application we need to add "servlet-api.jar" and "ojdbc14.jar" file in project build path.


form.html
--------

<form action="test" method="GET">

	<table align="center">
	
		<tr>
			<td>No:</td>
			<td><input type="text" name="t1"/></td>
		</tr>
		<tr>
			<td>Name:</td>
			<td><input type="text" name="t2"/></td>
		</tr>
		<tr>
			<td>Address:</td>
			<td><input type="text" name="t3"/></td>
		</tr>
		<tr>
			<td><input type="reset" value="reset"/></td>
			<td><input type="submit" value="submit"/></td>
		</tr>
	
	</table>
	
</form>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>DBSrv</servlet-name>
  	<servlet-class>com.ihub.www.DBSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>DBSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>


DBSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DBSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String sno=req.getParameter("t1");
		int no=Integer.parseInt(sno);
		String name=req.getParameter("t2");
		String add=req.getParameter("t3");
		
		//inserting the data into database 
		Connection con=null;
		PreparedStatement ps=null;
		String qry=null;
		int result=0;
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			qry="insert into student values(?,?,?)";
			ps=con.prepareStatement(qry);
			
			//set the values
			ps.setInt(1, no);
			ps.setString(2, name);
			ps.setString(3, add);
			
			//execute 
			result=ps.executeUpdate();
			
			if(result==0)
				pw.println("<center><h1>No Record Inserted </h1></center>");
			else
				pw.println("<center><h1>Record Inserted </h1></center>");
			
			ps.close();
			con.close();
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/DBApp/


Form Validation
================
The process of checking format and pattern of form data is called form validation such logic is called form validation logic.

To perform client side form validation we need to use javascript.


Deployment Directory structure
------------------------------
ValidationApp
|
|---Java Resources
	|
	|------src
		|	
		|---com.ihub.www
			|		
			|---FormSrv.java
|---WebContent
	|
	|---form.html
	|---validation.js 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
---------
<!DOCTYPE html>
<html>
	
	<head>
		<!--  Attach external javascript  -->
		<script language="javascript" src="validation.js"></script>		
	</head>
	
	<body>
		
		<form name="myform" action="test" method="GET" onsubmit="return validate()">
		
			Name: <input type="text" name="t1"/> <br>
			
			Age: <input type="text" name="t2"/> <br>
			
			<input type="submit" value="submit"/>
		
		</form>
		
	</body>
	
</html>


validation.js
---------------
function validate()
{
	var name=document.myform.t1.value;
	var age=document.myform.t2.value;
	
	if(name=="")
	{
		alert("Name is Mandatory");
		document.myform.t1.focus();
		return false;
	}
	
	if(age=="")
	{
		alert("Age is Mandatory");
		document.myform.t2.focus();
		return false;
	}
	else
	{
		if(isNaN(age))
		{
			alert("Age must be Numeric");
			document.myform.t2.value="";
			document.myform.t2.focus();
			return false;
		}
	}
	
	return true;
}

web.xml
------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>FormSrv</servlet-name>
  	<servlet-class>com.ihub.www.FormSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>FormSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

FormSrv.java
----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class FormSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		int age=Integer.parseInt(sage);
		
		if(age<18)
			pw.println("<center><h1>"+name+" U r not eligible to vote</h1></center>");
		else
			pw.println("<center><h1>"+name+" U r eligible to vote</h1></center>");
		
		pw.close();
	}
}

Request url
---------
	http://localhost:2525/ValidationApp/



Q) What is the difference between GET and POST methodology?

GET						POST
----------					----------
It is a default methodology.			It is not a default methodology.

It carries limited amount of data.		It carries unlimited amount of data.

It sends the request fastly.			It is bit slow.

It is not suitable for secure data.		It is suitable for secure data.

It is not suitable for encryption and 		It is suitable for encryption and file uploading.
file uploading.

To process GET methodology we will use		To process POST methodology we will use  
doGet(-,-) method.				doPost(-,-) method.


File Uploading
=============
The process of capturing a file from client machine file system and storing in a server machine file system is called file uploading and reverse is called file downloading.

There is no specific API in servlet to perfor file uploading.

We need to take the support of third party API called JAVAZOOM API.

JAVAZOOM API comes with zip format and once if we extracted we will get three jar files.

ex:
	uploadbean.jar  (Main jar file)
	struts.jar      (Dependent jar file)
	cos.jar         (Dependent jar file)


JAVAZOOM download link:

https://drive.google.com/file/d/1LB0WSJvSCCVOgz7xNwyuYtmy_0_TfJzq/view?usp=drive_link


Deployment Directory Structure
------------------------------
UploadApp
|
|---Java Resources
|	|
	|-------src
		|
		|---com.ihub.wwww
			|
			|---FormSrv.java
|---WebContent
	|
	|---form.html	
	|
	|---WEB-INF
		|
		|---web.xml 
		|		
		|-----lib
			|
			|---uploadbean.jar
			|---struts.jar		
			|---cos.jar
Note:
-----
In above application we need to add "servlet-api.jar" and "uploadbean.jar" file in project build path.

Copy and paste three jar files of javazoom api inside "WEB-INF/lib" folder seperately.


form.html
---------

<form action="test" method="POST" enctype="multipart/form-data">

	File1: <input type="file" name="f1"/> <br>
	
	File2: <input type="file" name="f2"/> <br>
	
	<input type="submit" value="submit"/>

</form>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>FormSrv</servlet-name>
  	<servlet-class>com.ihub.www.FormSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>FormSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

FormSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadBean;

public class FormSrv extends HttpServlet
{
	protected void doPost(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//file uploading logic
		try
		{
			UploadBean ub=new UploadBean();
			ub.setFolderstore("C:\\manoj");
			ub.setOverwrite(false);
			
			MultipartFormDataRequest nreq=new MultipartFormDataRequest(req);
			ub.store(nreq);
			
			pw.println("<center><h1>Files are uploaded successfully</h1></center>");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		pw.close();
	}
}

Request url
-------
	http://localhost:2525/UploadApp/

























































