Working with Date values
=========================
While dealing with DOB, DOA , DOR, DOD and etc we need to insert and retrieve date values.

It is never recommanded to store date values in the form string because we can't compare two dates.

Every database software designed to support date values.

Every database software support different date patterns.
ex:
	oracle -  dd-MMM-yy
	mysql  -  yyyy-MM-dd

Using simple Statement object we can't insert date values.

To overcome this limitation we need to use PreparedStatement object.

We can set date values to query parameter by using setDate(-,-) method.

A java.util.Date class is not suitable to perform database operation.

A java.sql.Date class is suitable to perform database operation.

Once JDBC driver gets the date value then it will insert date value in the pattern which is supported by underlying database software.


Standard procedure to insert date value
--------------------------------------
Diagram: jdbc4.1

1) Enduser gives date value in the form of String.

2) A parse() method of SimpleDateFormat class converts String date to java.util.Date class object.

3) Our application converts java.util.Date class object to java.sql.Date class object.

4) A ps.setDate(-,-) method is used to set the date value to query parameter.

5) Once JDBC driver gets the date value then it will insert date value in the pattern which is 
   supported by underlying database software.


emp1 table
===========
drop table emp1;

create table emp1(eid number(3),ename varchar2(10),edoj date);


DateInsertApp.java
------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.Scanner;

public class DateInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the employee id :");
		int id=sc.nextInt();
		
		System.out.println("Enter the employee name :");
		String name=sc.next();
		
		System.out.println("Enter the employee DOJ(dd-MM-yyyy) :");
		String sdoj=sc.next();
		
		//convert string date to util date 
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		java.util.Date udoj=sdf.parse(sdoj);
		
		//convert util date to sql date 
		long ms=udoj.getTime();
		java.sql.Date sqldoj=new java.sql.Date(ms);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into emp1 values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, id);
		ps.setString(2,name);
		ps.setDate(3, sqldoj);
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
	}
}

DateRetrieveApp.java
-------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;

public class DateRetrieveApp 
{
	public static void main(String[] args)throws Exception 
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="select * from emp1";
		PreparedStatement ps=con.prepareStatement(qry);
		
		ResultSet rs=ps.executeQuery();
		while(rs.next())
		{
			int id=rs.getInt(1);
			String name=rs.getString(2);
			
			java.sql.Date sqldoj=rs.getDate(3);
			
			//convert sql date to util date 
			java.util.Date udoj=(java.util.Date)sqldoj;
			
			//convert util date to string date 
			SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
			String sdoj=sdf.format(udoj);
			
			
			System.out.println(id+" "+name+" "+sdoj);
		}
		
		rs.close();
		ps.close();
		con.close();
	}
}



Working with LOB values
========================
Files are known as LOB's.

We have two types of LOB's.

1) BLOB (Binary Large Object)
	ex:
		images, audio,video, avi file and etc.

2) CLOB (Character Large Object)
	ex:
		text file, advanced text file and etc

While dealing with matronial applications, job protal applications, profile management application and etc we need to insert and retrieve LOB values.

While dealing with simple Statement we can't place LOB value directly to query parameter.We need to use PreparedStatement object.

In PreparedStatement object we can set LOB values by using following methods.
ex:
	ps.setBinaryStream/ps.setBLOB(-,-,-)
	ps.setCharacterStream/ps.setCLOB(-,-,-)

emp2 table
===========
drop table emp2;

create table emp2(eid number(3),ename varchar2(10), ephoto  BLOB);


PhotoInsertApp.java
--------------------
package com.ihub.www;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PhotoInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the employee id :");
		int id=sc.nextInt();
		
		System.out.println("Enter the employee name :");
		String name=sc.next();
		
		//locate a file 
		File f=new File("src/com/ihub/www/rock.jpg");
		FileInputStream fis=new FileInputStream(f);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into emp2 values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, id);
		ps.setString(2,name);
		ps.setBinaryStream(3, fis, (int)f.length());
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
	}
}

PhotoRetrieveApp.java
----------------------
package com.ihub.www;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class PhotoRetrieveApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		String qry="select * from emp2";
		PreparedStatement ps=con.prepareStatement(qry);
		
		ResultSet rs=ps.executeQuery();
		
		while(rs.next())
		{
			InputStream is=rs.getBinaryStream(3);
			FileOutputStream fos=new FileOutputStream("D:\\Training\\IH-JAVA-038\\rock.jpg");
			
			int byteReads=0;
			byte[] buff=new byte[100];
			
			while((byteReads=is.read(buff))!=-1)
			{
				fos.write(buff,0, byteReads);
			}
			
			fos.close();
		}
		System.out.println("Please check the location");
		rs.close();
		ps.close();
		con.close();
		
	}
}


Thin-Client/Fat-Server application
==================================

Diagram: jdbc4.2

Every JDBC Application is a thin-client/Fat-Server application.

To create a thin-client/fat-server application we need to store business logic and persistence logic in the database software in the form of PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we need to use CallableStatement object.

PL/SQL Procedure
------------------
create or replace procedure first_proc(A IN number,B IN number, C OUT number)
IS
BEGIN
C:=A+B;
END;
/

ex:
---
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register out parameter
		cst.registerOutParameter(3, Types.INTEGER);
		
		//set the IN parameter
		cst.setInt(1, 20);
		cst.setInt(2, 30);
		
		//execute 
		cst.execute();
		
		//gather the result
		int result=cst.getInt(3);
		System.out.println("sum of two numbers is ="+result);
		
		cst.close();
		con.close();
	}
}


Working with Properties file
=============================
In regular intervals our DBA will change username and password for security reason.

It is never recommanded to declare database properties directly to the application.

It is always recommanded to use read database properties from properties file.

A properties file will store the data in the form of key and value.


dbdetails.properties
--------------------
driver= oracle.jdbc.driver.OracleDriver
url= jdbc:oracle:thin:@localhost:1521:XE
username=system
password=admin 

ex:
---
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesFileApp 
{
	public static void main(String[] args)throws Exception  
	{
		//locate a file 
		FileInputStream fis=new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		//create Properties class 
		Properties p=new Properties();
		
		//reading the data from file to class
		p.load(fis);
		
		//reading the data from class
		String s1=p.getProperty("driver");
		String s2=p.getProperty("url");
		String s3=p.getProperty("username");
		String s4=p.getProperty("password");
		
		Class.forName(s1);
		Connection con=DriverManager.getConnection(s2,s3,s4);
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}


JDBC Flexible Application
==========================
Connection object is a heavy weight object and it is not recommaned to create Connection object in every jdbc application.

It is recommaned to create a seperate class which returns Connection object.

ex:
----

DBConnection.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	static Connection con=null;
	
	private DBConnection() 
	{
	}
	
	public static Connection getConnection()
	{
		try
		{
			if(con==null)
			{
				Class.forName("oracle.jdbc.driver.OracleDriver");
				con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}



FlexibleApp.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp 
{
	public static void main(String[] args)throws Exception 
	{
		Connection con=DBConnection.getConnection();
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}
































































































































