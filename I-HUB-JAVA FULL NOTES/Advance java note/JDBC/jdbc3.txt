JDBC Connection pool
====================
It is a factory containing set of readily available JDBC Connection objects before actual being used.

Diagram: jdbc3.1

JDBC Connection pool represent connectivity with same database software.

Advantages: 

> It gives reusable JDBC Connection objects.

> With minimum number of JDBC Connection objects we can interact with multiple clients.

> A programmer is not responsible to create, manage and destroy JDBC Connection objects in JDBC  
  Connection pool.


Type3 JDBC Driver Architecture / Net Protocol
==============================================
Webserver or proxy server or IDE's server contains set of readily available JDBC Connection objects in JDBC Connection pool.

Type3 JDBC driver is not designed to interact with databse software directly. 

It is designed to interact with web server or proxy server to get one JDBC Connection object from JDBC Connection object.

Diagram: jdbc3.2

With respect to the diagram:

1) Webserver or proxy server interacts with database software and gets reusable JDBC Connection
   objects in JDBC Connection pool.

2) Our application interacts with web server or proxy server and gets one reusable JDBC Connection
   object.

3) Our application uses Connection object to create other JDBC Connection objects.

4) Once if we call con.close() Connection object goes back to JDBC Connection pool.



Types of JDBC Connection objects
================================

We have two types of Connection objects.

1) Direct JDBC Connection object 

2) Pooled JDBC Connection object


1) Direct JDBC Connection object 
-------------------------------
A JDBC Connection object which is created by the user is called direct JDBC Connection object.
ex:
	Class.forName("oracle.jdbc.driver.OracleDriver");
Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");


2) Pooled JDBC Connection object
-----------------------------
A JDBC Connection object which is gathered from JDBC Connection pool.



Types of Statement objects
===========================
We have three Statement objects.

1) Simple Statement object
-------------------------
It is an object of underlying supplied java class which implements java.sql.Statement interface.

2) PreparedStatement object 
---------------------------
It is an object of underlying supplied java class which implements java.sql.PreparedStatement interface.

3) CallableStatement object 
---------------------------
It is an object of underlying supplied java class which implements java.sql.CallableStatement interface.


SQL Injection problem
======================
Along with input values if we pass special SQL instruction which change the behaviour of a query and behaviour of an application is called SQL injection problem.

Here special SQL instruction means comment in SQL i.e --.

While dealing with simple Statement object there is a chance of raising SQL injection problem.

To overcome this limitation we need to use PreparedStatement object.

input:
	username : raja'--

	password : hyd

	Valid Credentials 


userlist table
===============
drop table userlist;

create table userlist(uname varchar2(10),pwd varchar2(10));

insert into userlist values('raja','rani');

insert into userlist values('king','kingdom');

commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

public class SQLInjProbApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the username :");
		String name=sc.next();
		
		System.out.println("Enter the password :");
		String pass=sc.next();
		
		//converting inputs according to SQL query
		name="'"+name+"'";
		pass="'"+pass+"'";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		String qry="select count(*) from userlist where uname="+name+" and pwd="+pass;
		
		ResultSet rs=st.executeQuery(qry);
		
		int result=0;
		while(rs.next())
		{
			result=rs.getInt(1);
		}
		
		if(result==0)
			System.out.println("Invalid Credentials");
		else
			System.out.println("Valid Credentials");
		
		rs.close();
		st.close();
		con.close();
		
	}
}

Limitations with Simple Statement object
=========================================
1) It is not suitable to execute same query for multiple times with same or different values.

2) It raises SQL Injection problem.

3) We can't use string inputs directly to query parameter without any conversion.

4) Framing query with variables is quit complex.

5) It does not allow us to insert date values to database table column.

6) It does not allow us to insert LOB(Large Object) values to databaset table column.

To overcome this above limitations we need to use PreparedStatement object.


Pre-compiled SQL Query
=====================
Our query goes to database software without inputs and becomes parsed query either it is executed or not is called pre-compiled SQL Query.

PreparedStatement object deals with pre-compiled SQL Query.

Working with PreparedStatement object
=====================================
step1:
-----
	Create a query with placeholders or parameters.
	ex:
		String qry="insert into student values(?,?,?)";

step2:
-----
	Convert SQL query to pre-compiled SQL Query.
	ex:
		PreparedStatement ps=con.prepareStatement(qry);

step3:
-----
	Set the values to query parameters.
	ex:
		ps.setInt(1,no);
		ps.setString(2,name);
		ps.setString(3,add);

step4:
----
	Execute pre-compiled SQL query.
	ex:
		ps.executeUpdate();

step5:
------
	Close PreparedStatement object.


Q) Write a JDBC application to insert a record into student table using PreparedStatement object?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the student no :");
		int no=sc.nextInt();
		
		System.out.println("Enter the student name :");
		String name=sc.next();
		
		System.out.println("Enter the student address :");
		String add=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		String qry="insert into student values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, no);
		ps.setString(2, name);
		ps.setString(3, add);
		
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
	}
}


Q) Write a jdbc application to update student name based on student no?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSUpdateApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the student no :");
		int no=sc.nextInt();
		
		System.out.println("Enter the student name :");
		String name=sc.next();
	
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		String qry="update student set sname=? where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setString(1, name);
		ps.setInt(2, no);
		
		//execute
		int result=ps.executeUpdate();
		if(result==0)
			System.out.println("No Record Updated");
		else
			System.out.println("Record Updated");
		
		ps.close();
		con.close();
	}
}

Q) Write a jdbc application to delete student record based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSDeleteApp 
{
	public static void main(String[] args)throws Exception 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the student no :");
		int no=sc.nextInt();
	
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		String qry="delete from student where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, no);
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Deleted");
		else
			System.out.println("Record Deleted");
		
		ps.close();
		con.close();
	}
}


Solution for SQL injection problem
==================================
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Scanner;

public class SolForSSQLInjProbApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the username :");
		String name=sc.next();
		
		System.out.println("Enter the password :");
		String pass=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		String qry="select count(*) from userlist where uname=? and pwd=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setString(1, name);
		ps.setString(2, pass);
		
		//execute query
		ResultSet rs=ps.executeQuery();
		
		int result=0;
		while(rs.next())
		{
			result=rs.getInt(1);
		}
		if(result==0)
			System.out.println("Invalid Credentials");
		else
			System.out.println("Valid Credentials");
		
		rs.close();
		ps.close();
		con.close();
		
	}
}

DatabaseMetaData
=================
DatabaseMetaData is an interface which is present in java.sql package.

DatabaseMetaData provides metadata of a database.

DatabaseMetaData gives information about database product name, database product version, database driver name, database driver version, database username and etc.

We can create DatabaseMetaData object by using getMetaData() method of Connection object.
ex:
	DatabaseMetaData dbmd=con.getMetaData();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;

public class DBMDApp 
{
	public static void main(String[] args)throws Exception
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		DatabaseMetaData dbmd=con.getMetaData();
		
		System.out.println(dbmd.getDatabaseProductName());
		System.out.println(dbmd.getDatabaseProductVersion());
		System.out.println(dbmd.getDriverName());
		System.out.println(dbmd.getDriverVersion());
		System.out.println(dbmd.getUserName());
		
		con.close();
	}
}


ResultSetMetaData
=================
ResultSetMetaData is an interface which is present in java.sql package.

ResultSetMetaData provides metadata of a table.

ResultSetMetaData gives information about number of columns, name of the columns, type of columns,
size of columns and etc.

We can create ResultSetMetaData object by using getMetaData() method of ResultSet object.

ex:
	ResultSetMetaData rsmd=rs.getMetaData();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

public class RSMDApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		
		ResultSetMetaData rsmd=rs.getMetaData();
		System.out.println(rsmd.getColumnCount());
		System.out.println(rsmd.getColumnName(1));
		System.out.println(rsmd.getColumnTypeName(2));
		System.out.println(rsmd.getColumnDisplaySize(2));
		
		rs.close();
		st.close();
		con.close();
	}
}

Interview Question
==================
Q) Write a java program to display sub array equals to given sum?

input:
	arr = 1 2 3 7 6 

	sum = 12

output:
	2 3 7 

ex:
----
package com.ihub.www;

public class SubArray 
{
	public static void main(String[] args) 
	{
		int[] arr={1,2,3,7,5};
		int sum=12;
		
		for(int start=0;start<arr.length;start++)
		{
			int currentSum=0;
			
			for(int end=start;end<arr.length;end++)
			{
				currentSum+=arr[end];
				
				if(sum == currentSum)
				{
					for(int k=start;k<=end;k++)
					{
						System.out.print(arr[k]+" ");
					}
				}
				
			}
		}
	}
}

approach2
-----------
package com.ihub.www;

public class SubArray 
{
	public static void main(String[] args) 
	{
		int[] arr={1,2,3,7,6};
		int sum=12;
		
		int cnt=0;
		
		for(int start=0;start<arr.length;start++)
		{
			int currentSum=0;
			
			for(int end=start;end<arr.length;end++)
			{
				currentSum+=arr[end];
				
				if(sum == currentSum)
				{
					cnt=1;
					
					for(int k=start;k<=end;k++)
					{
						System.out.print(arr[k]+" ");
					}
				}
				
			}
			if(cnt==1)
			{
				break;
			}
		}
	}
}





























































































