1) NOT NULL 
===========
NOT NULL constraint does not accept null values.

NOT NULL constraint can access duplicate values.

NOT NULL constraint can be created only at column level.


column level
------------
drop table student;

create table student(sno number(3) NOT NULL,sname varchar2(10),sadd varchar2(12));

insert into student values(101,'raja','hyd');

insert into student values(101,'ravi','delhi');

insert into student values(null,'raja','hyd'); //invalid 


Note:
-----
NOT NULL constraint can be created for multiple columns.

ex:

drop table student;

create table student(sno number(3) NOT NULL,
			sname varchar2(10) NOT NULL,
				sadd varchar2(12) NOT NULL);

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi'); //invalid 

insert into student values(102,null,'delhi'); //invalid 

insert into student values(102,'ravi',null); // invalid 


2) UNIQUE 
==========
UNIQUE constraint does not accept duplicate values.

UNIQUE constraint accepts null values.

UNIQUE constraint can be created at column level and table level.

column level
------------
drop table student;

create table student(sno number(3) UNIQUE,sname varchar2(10),sadd varchar2(12));

insert into student values(101,'raja','hyd'); //valid

insert into student values(101,'ravi','delhi'); //invalid 

insert into student values(null,'ravi','delhi'); //valid 


table level
------------
drop table student;

create table student(sno number(3),sname varchar2(10),sadd varchar2(12), UNIQUE(sno));

insert into student values(101,'raja','hyd'); //valid

insert into student values(101,'ravi','delhi'); //invalid 

insert into student values(null,'ravi','delhi'); //valid 

Note:
-----
UNIQUE constraint can be created for multiple columns.

ex:
---
drop table student;

create table student(sno number(3) UNIQUE,
			sname varchar2(10) UNIQUE,
				sadd varchar2(12) UNIQUE);

insert into student values(101,'raja','hyd'); //valid 

insert into student values(101,'ravi','delhi'); //invalid 

insert into student values(102,'raja','delhi'); //invalid

insert into student values(102,'raja','hyd'); // invalid  


3) PRIMARY KEY
================
Primary key is a combination of NOT NULL and UNIQUE constraint.

Primary key does not accept duplicates and null values.

Primary key can be created at column level and table level.

A table can have only one primary key.


column level
------------
drop table student;

create table student(sno number(3) PRIMARY KEY,sname varchar2(10),sadd varchar2(12));

insert into student values(101,'raja','hyd'); //valid 

insert into student values(101,'ravi','delhi'); //invalid 

insert into student values(null,'ravi','delhi'); //invalid 


table level
-----------
drop table student;

create table student(sno number(3),sname varchar2(10),sadd varchar2(12), PRIMARY KEY(sno));

insert into student values(101,'raja','hyd'); //valid 

insert into student values(101,'ravi','delhi'); //invalid 

insert into student values(null,'ravi','delhi'); //invalid 


4) Foreign Key 
===============
It is used to establish the relationship between two tables.

This relationship is called parent and child relationship or master and detailed relationship.

To establish the relationship between two tables. A parent table must have primary key or unique key and child table must have foreign key.

A foreign key will accept only those values which are present in primary key.

A primary key column name or foreign key column name may or not may not match but datatype must match.

Diagram: oracle6.1

college table
==============
drop table college;

create table college(sno number(3) primary key, sname varchar2(10),sadd varchar2(12));

insert into college values(101,'raja','hyd');

insert into college values(102,'ravi','delhi');

insert into college values(103,'ramana','vizag');

commit;

library table 
=============
drop table library;

create table library(roll_no number(3) REFERENCES college(sno),book_name varchar2(10));

insert into library values(101,'java');

insert into library values(102,'oracle');

insert into library values(103,'HTML');

insert into library values(103,'CSS');

insert into library values(null,'spring');

insert into library values(104,'hibernate'); //invalid 

Note:
----
	If we want to drop the tables then first we need to drop child table then parent table.
	ex:
		drop table library;
		drop table college;

5) CHECK 
==========
CHECK constraint is used to describe domain of a column.

It describes what type of values a column must accept.

CHECK constraint can be created at column level and table level.

column level
------------
drop table student;

create table student(sno number(3),sname varchar2(10), smarks number(3) check(smarks<=100));

insert into student values(101,'raja',89);

insert into student values(102,'ravi',189); //invalid 

insert into student values(103,'ramana',879); //invalid 

commit;


column level
------------
drop table student;

create table student(sno number(3),sname varchar2(10), 
					smarks number(3) check(smarks between 0 and 100));

insert into student values(101,'raja',89);

insert into student values(102,'ravi',189); //invalid 

insert into student values(103,'ramana',879); //invalid 

commit;

column level
------------
drop table student;

create table student(sno number(3),sname varchar2(10) check(sname=lower(sname)), 
					smarks number(3));

insert into student values(101,'raja',89);

insert into student values(102,'RAVI',189); //invalid 

insert into student values(103,'RaMaNa',879); //invalid 

commit;

column level
------------
drop table student;

create table student(sno number(3),sname varchar2(10) check(sname=upper(sname)), 
					smarks number(3));

insert into student values(101,'raja',89); //invalid 

insert into student values(102,'RAVI',189); 

insert into student values(103,'RaMaNa',879); //invalid 

commit;


table level
------------
drop table student;

create table student(sno number(3),sname varchar2(10), 
					smarks number(3),  check(sname=upper(sname)));

insert into student values(101,'raja',89); //invalid 

insert into student values(102,'RAVI',189); 

insert into student values(103,'RaMaNa',879); //invalid 

commit;

Pseudo Colums
==============
Pseudo column means a column which is not real.

We have two pseudo columns.

1) ROWNUM 

2) ROWID 


1) ROWNUM
---------
	It always starts with '1' and increment by '1'.

	ROWNUM values are temperory.

	Once the query is executed we will loss rownum values.

	ex:
		select eid,ename,esal from emp;
		select rownum,eid,ename,esal from emp;
		select rownum,deptno,dname,dloc from dept;

2) ROWID 
------
	It is a hexadecimal value.
	
	ROWID is permanent.

	ROWID is a memory location where our records will store in a database table.

	ex:
		select rownum,eid,ename,esal from emp;

		select rowid,rownum,eid,ename,esal from emp;

Interview queries
------------------
Q) Write a query to display first three records from employee table?

	select * from emp where rownum between 1 and 3;

	or 

	select * from emp where rownum<=3;



Q) Write a query to display exact 4th record from employee table?

	select * from emp where rownum<=4
	minus
	select * from emp where rownum<=3;



Q) Write a query to add the constraint to a existing table?

	alter table emp add primary key(eid);



Q) Write a query to drop the constraint from existing table?

	alter table emp DROP primary key;


Assignment
==========
Q) Write a query to display all the employees information whose names ends with kumar?

employees table
----------------
drop table employees;

create table employees(eid number(3),ename varchar2(20), esal number(10));

insert into employees values(101,'Alan Morries',10000);
insert into employees values(101,'Raj Kumar',10000);
insert into employees values(101,'Erick Anderson',10000);
insert into employees values(101,'Prem Kumar',10000);
insert into employees values(101,'Lisa Jose',10000);
insert into employees values(101,'Sai Kumar',10000);
insert into employees values(101,'Nancy Pro',10000);
commit;

solution :

	 select * from employees where ename like '%Kumar';



























































